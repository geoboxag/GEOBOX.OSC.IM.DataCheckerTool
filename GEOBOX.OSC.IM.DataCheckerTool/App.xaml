<Application x:Class="GEOBOX.OSC.IM.DataCheckerTool.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:GEOBOX.OSC.IM.DataCheckerTool"
             xmlns:wpfExtensions="clr-namespace:GEOBOX.OSC.IM.DataCheckerTool.WpfExtensions"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <Color x:Key="gbxMainWindowTitelBarFontColor">#FFFFFFFF</Color>
            <Color x:Key="gbxMainWindowStyleBorderColor">#FF4D85FF</Color>
            <Color x:Key="gbxMainWindowStyleShadowColor">#FF919191</Color>
            <Color x:Key="gbxBtnDefaultColor">#FFFFFFFF</Color>
            <Color x:Key="gbxWindowBtnActiveColor">#FFFFFFFF</Color>
            <Color x:Key="gbxBtnFontColor">#FF838383</Color>
            <ControlTemplate x:Key="WindowTemplateKey"
                             TargetType="{x:Type Window}">
                <Border BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                    <Grid>
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                        <ResizeGrip x:Name="WindowResizeGrip"
                                    HorizontalAlignment="Right"
                                    IsTabStop="false"
                                    Visibility="Collapsed"
                                    VerticalAlignment="Bottom" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="ResizeMode"
                                       Value="CanResizeWithGrip" />
                            <Condition Property="WindowState"
                                       Value="Normal" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Visibility"
                                TargetName="WindowResizeGrip"
                                Value="Visible" />
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="gbxMainWindowStyle"
                   TargetType="{x:Type Window}">
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
                <Setter Property="Background"
                        Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Window}">
                            <Border BorderThickness="1"
                                    Background="White"
                                    Margin="2,2,2,5">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="10"
                                                      Color="{DynamicResource gbxMainWindowStyleShadowColor}"
                                                      ShadowDepth="7" />
                                </Border.Effect>
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{DynamicResource gbxMainWindowStyleBorderColor}" />
                                </Border.BorderBrush>
                                <AdornerDecorator>
                                    <ContentPresenter />
                                </AdornerDecorator>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="ResizeMode"
                             Value="CanResizeWithGrip">
                        <Setter Property="Template"
                                Value="{StaticResource WindowTemplateKey}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2"
                                       SnapsToDevicePixels="true"
                                       Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                       StrokeThickness="1"
                                       StrokeDashArray="1 2" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <SolidColorBrush x:Key="Button.Static.Background"
                             Color="#FFDDDDDD" />
            <SolidColorBrush x:Key="Button.Static.Border"
                             Color="#FF707070" />
            <SolidColorBrush x:Key="Button.MouseOver.Background"
                             Color="#FFBEE6FD" />
            <SolidColorBrush x:Key="Button.MouseOver.Border"
                             Color="#FF3C7FB1" />
            <SolidColorBrush x:Key="Button.Pressed.Background"
                             Color="#FFC4E5F6" />
            <SolidColorBrush x:Key="Button.Pressed.Border"
                             Color="#FF2C628B" />
            <SolidColorBrush x:Key="Button.Disabled.Background"
                             Color="#FFF4F4F4" />
            <SolidColorBrush x:Key="Button.Disabled.Border"
                             Color="#FFADB2B5" />
            <SolidColorBrush x:Key="Button.Disabled.Foreground"
                             Color="#FF838383" />
            <Style x:Key="MainWindowTitleBarButton"
                   TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle"
                        Value="{StaticResource FocusVisual}" />
                <Setter Property="BorderThickness"
                        Value="0" />
                <Setter Property="HorizontalContentAlignment"
                        Value="Center" />
                <Setter Property="VerticalContentAlignment"
                        Value="Center" />
                <Setter Property="Padding"
                        Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter"
                                                  Focusable="False"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted"
                                         Value="true" />
                                <Trigger Property="IsDefault"
                                         Value="False" />
                                <Trigger Property="IsMouseOver"
                                         Value="true">
                                    <Setter Property="Background"
                                            TargetName="border"
                                            Value="Red" />
                                    <Setter Property="BorderBrush"
                                            TargetName="border"
                                            Value="Red" />
                                </Trigger>
                                <Trigger Property="IsPressed"
                                         Value="true">
                                    <Setter Property="Background"
                                            TargetName="border"
                                            Value="Red" />
                                    <Setter Property="BorderBrush"
                                            TargetName="border"
                                            Value="Red" />
                                </Trigger>
                                <Trigger Property="IsEnabled"
                                         Value="false">
                                    <Setter Property="Background"
                                            TargetName="border"
                                            Value="{StaticResource Button.Disabled.Background}" />
                                    <Setter Property="BorderBrush"
                                            TargetName="border"
                                            Value="{StaticResource Button.Disabled.Border}" />
                                    <Setter Property="TextElement.Foreground"
                                            TargetName="contentPresenter"
                                            Value="{StaticResource Button.Disabled.Foreground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource gbxMainWindowStyleBorderColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Opacity"
                        Value="1" />
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource gbxMainWindowStyleBorderColor}" />
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="NavigationPanelButtonStyle"
                   TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle"
                        Value="{StaticResource FocusVisual}" />
                <Setter Property="Background"
                        Value="{StaticResource Button.Static.Background}" />
                <Setter Property="BorderBrush"
                        Value="{StaticResource Button.Static.Border}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="BorderThickness"
                        Value="1" />
                <Setter Property="HorizontalContentAlignment"
                        Value="Center" />
                <Setter Property="VerticalContentAlignment"
                        Value="Center" />
                <Setter Property="Padding"
                        Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="true"
                                    Margin="0"
                                    Padding="0,2,0,0"
                                    Height="25">
                                <ContentPresenter x:Name="contentPresenter"
                                                  Focusable="False"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  Margin="10,1,1,1" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted"
                                         Value="true">
                                    <Setter Property="BorderBrush"
                                            TargetName="border"
                                            Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver"
                                         Value="true">
                                    <Setter Property="Background"
                                            TargetName="border"
                                            Value="#FFFF1D1D" />
                                    <Setter Property="BorderBrush"
                                            TargetName="border"
                                            Value="#FFFF1D1D" />
                                </Trigger>
                                <Trigger Property="IsPressed"
                                         Value="true">
                                    <Setter Property="Background"
                                            TargetName="border"
                                            Value="#FFFF1D1D" />
                                    <Setter Property="BorderBrush"
                                            TargetName="border"
                                            Value="#FFFF1D1D" />
                                </Trigger>
                                <Trigger Property="IsEnabled"
                                         Value="false" />
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type Button}"
                   x:Key="SettingWindowTitleBarButton">
                <Setter Property="FocusVisualStyle"
                        Value="{StaticResource FocusVisual}" />
                <Setter Property="BorderThickness"
                        Value="0" />
                <Setter Property="HorizontalContentAlignment"
                        Value="Center" />
                <Setter Property="VerticalContentAlignment"
                        Value="Center" />
                <Setter Property="Padding"
                        Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="true">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{DynamicResource gbxMainWindowStyleBorderColor}" />
                                </Border.BorderBrush>
                                <Border.Background>
                                    <SolidColorBrush Color="{DynamicResource gbxMainWindowStyleBorderColor}" />
                                </Border.Background>
                                <ContentPresenter x:Name="contentPresenter"
                                                  Focusable="False"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted"
                                         Value="true" />
                                <Trigger Property="IsDefault"
                                         Value="False" />
                                <Trigger Property="IsMouseOver"
                                         Value="true" />
                                <Trigger Property="IsPressed"
                                         Value="true" />
                                <Trigger Property="IsEnabled"
                                         Value="false">
                                    <Setter Property="TextElement.Foreground"
                                            TargetName="contentPresenter"
                                            Value="{StaticResource Button.Disabled.Foreground}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource ttMainWindowBorderColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Opacity"
                        Value="1" />
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource ttMainWindowBorderColor}" />
                    </Setter.Value>
                </Setter>
            </Style>
            <wpfExtensions:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"
                                                        True="Collapsed"
                                                        False="Visible" />
            <wpfExtensions:BooleanToVisibilityConverter x:Key="InversedBooleanToVisibilityConverter"
                                                        True="Visible"
                                                        False="Collapsed" />
        </ResourceDictionary>
    </Application.Resources>
</Application>
